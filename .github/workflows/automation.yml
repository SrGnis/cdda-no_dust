name: CDDA No Dust

on:
  schedule:
    # Run every day at midnight
    - cron: '0 0 * * *'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Specific CDDA tag to process (optional)'
        required: false
        type: string

env:
  PYTHON_VERSION: '3.9'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run tests
      run: |
        python -m pytest tests/ -v --tb=short
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          test-results.xml
          coverage.xml
        retention-days: 30

  no_dust:
    name: Run No Dust Pipeline
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    permissions:
      contents: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Configure Git
      run: |
        git config --global user.name "GitHub Actions Bot"
        git config --global user.email "actions@github.com"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run no dust pipeline (specific tag)
      if: github.event.inputs.tag != ''
      run: |
        python -m src.no_dust.main_processor "${{ github.event.inputs.tag }}" \
          --config config.json \
          --log-level INFO

    - name: Run no dust pipeline (check for new tags)
      if: github.event.inputs.tag == ''
      run: |
        python -m src.no_dust.pipeline_automation \
          --config config.json \
          --log-level INFO
          
    - name: Upload no dust logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: no-dust-logs
        path: |
          no_dust.log
          error_log.json
        retention-days: 30

  notify:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [test, no_dust]
    if: failure()
    
    steps:
    - name: Create Issue on Failure
      uses: actions/github-script@v6
      with:
        script: |
          const title = `No Dust Pipeline Failed - ${new Date().toISOString().split('T')[0]}`;
          const body = `
          The CDDA No Dust pipeline has failed.
          
          **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          **Trigger:** ${{ github.event_name }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          
          Please check the logs and fix any issues.
          `;
          
          // Check if an issue already exists for today
          const today = new Date().toISOString().split('T')[0];
          const existingIssues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'no-dust-failure'
          });
          
          const todayIssue = existingIssues.data.find(issue => 
            issue.title.includes(today)
          );
          
          if (!todayIssue) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['automation-failure', 'bug']
            });
          }

  cleanup:
    name: Cleanup Old Artifacts
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Delete old workflow runs
      uses: actions/github-script@v6
      with:
        script: |
          const runs = await github.rest.actions.listWorkflowRuns({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'automation.yml',
            per_page: 100
          });
          
          // Keep the last 10 runs, delete the rest
          const runsToDelete = runs.data.workflow_runs.slice(10);
          
          for (const run of runsToDelete) {
            if (run.status === 'completed') {
              try {
                await github.rest.actions.deleteWorkflowRun({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: run.id
                });
                console.log(`Deleted workflow run ${run.id}`);
              } catch (error) {
                console.log(`Failed to delete workflow run ${run.id}: ${error.message}`);
              }
            }
          }
